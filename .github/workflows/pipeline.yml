name: PIPELINE

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

jobs:
  bump:
    name: Get And Bump SemVer üëä
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repo üì¶
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Bump version and push tag üëä
        uses: anothrNick/github-tag-action@master
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
          RELEASE_BRANCHES: master
          DEFAULT_BUMP: patch
          WITH_V: false
  build:
    name: Build üî®
    runs-on: ubuntu-latest
    outputs:
      pom_version: ${{ steps.set_version.outputs.pom_version }}
      major_version: ${{ steps.set_version.outputs.major_version }}
      minor_version: ${{ steps.set_version.outputs.minor_version }}
      build_version: $ {{ steps.set_version.outputs.build_version}}
    needs: [bump]
    steps:
      - name: Checkout repo üì¶
        uses: actions/checkout@v4
      - name: Cache Node.js modules üíæ
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node ‚öôÔ∏è
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      - name: Extract version from package.json üîç
        id: set_version
        run: |
            POM_VERSION=$(cat package.json \
            grep version \
            head -1 \
            awk -F: '{ print $2 }' \
            sed 's/[",]//g' \
            tr -d '[[:space:]]')
            MAJOR_VERSION=$(echo $POM_VERSION | cut -d. -f1).$(echo $POM_VERSION | cut -d. -f2)
            MINOR_VERSION=$(echo $POM_VERSION | cut -d. -f1).$(echo $POM_VERSION | cut -d. -f2)
            BUILD_VERSION=$(echo $POM_VERSION | cut -d. -f1).$(echo $POM_VERSION | cut -d. -f2).$(echo $POM_VERSION | cut -d. -f3)
            echo --- set output for step ---
            echo "pom_version=${POM_VERSION}" >> $GITHUB_ENV
            echo "major_version=${MAJOR_VERSION}" >> $GITHUB_ENV
            echo "minor_version=${MINOR_VERSION}" >> $GITHUB_ENV
            echo "build_version=${BUILD_VERSION}" >> $GITHUB_ENV
            echo --- set output for job ---
            echo "::set-output name=pom_version::${POM_VERSION}"
            echo "::set-output name=major_version::${MAJOR_VERSION}"
            echo "::set-output name=minor_version::${MINOR_VERSION}"
            echo "::set-output name=build_version::${BUILD_VERSION}"
      - name: build (install dependencies) ‚öôÔ∏è
        run: |
            npm install
      - name: build (build) üî®
        run: |
            npm run build
      - name: Upload build artifacts ‚¨ÜÔ∏è
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ./dist

  docker-build:
    name: Build Docker Image üêã
    runs-on: ubuntu-latest
    needs: [bump, build]
    steps:
      - name: Checkout repo üì¶
        uses: actions/checkout@v4
      - name: Download build artifacts ‚¨áÔ∏è
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist
      - name: Setup QEMU ‚öôÔ∏è
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx ‚öôÔ∏è
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub üîë
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and push üî®
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: |
              ${{ secrets.DOCKER_HUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME}}:latest
              ${{ secrets.DOCKER_HUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME}}:${{ needs.build.outputs.major_version }}
              ${{ secrets.DOCKER_HUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME}}:${{ needs.build.outputs.minor_version }}
              ${{ secrets.DOCKER_HUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME}}:${{ needs.build.outputs.build_version }}
  deploy:
    name: Deployment üöÄ
    runs-on: ubuntu-latest
    needs: [docker-build, build]
    steps:
      - name: Checkout repo üì¶
        uses: actions/checkout@v4
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved
      - name: Touch OVPN client-config file
        run: touch client.ovpn
      - name: Fill OVPN client-config file
        run: |
            echo "${{ secrets.VPN_OVPN_FILE }}" >> client.ovpn
      - name: Connect to VPN üîì
        uses: "kota65535/github-openvpn-connect-action@v3"
        with:
          config_file: client.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}
      - name: Installing SSH key üîë
        uses: UnterrainerInformatik/setup-ssh-action@v1
        with:
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
      - name: Create deploy directory üöß
        uses: UnterrainerInformatik/ssh-mkdir-action@v1
        with:
          dir: ${{ secrets.DEPLOY_DIR }}
          user: ${{ secrets.DEPLOY_SSH_USER }}
          host: ${{ secrets.DEPLOY_SERVER }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
      - name: Create data directory üöß
        uses: UnterrainerInformatik/ssh-mkdir-action@v1
        with:
          dir: ${{ secrets.DATA_DIR }}
          user: ${{ secrets.DEPLOY_SSH_USER }}
          host: ${{ secrets.DEPLOY_SERVER }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
      - name: Touch .env file for deployment
        run: touch ./deploy/.env
      - name: Fill .env file for deployment
        run: |
            echo POM_VERSION=${{ needs.build.outputs.pom_version }} >> ./deploy/.env
            echo MAJOR_VERSION=${{ needs.build.outputs.major_version }} >> ./deploy/.env
            echo MINOR_VERSION=${{ needs.build.outputs.minor_version }} >> ./deploy/.env
            echo BUILD_VERSION=${{ needs.build.outputs.build_version }} >> ./deploy/.env
            echo DOCKER_HUB_USER=${{ secrets.DOCKER_HUB_USER }} >> ./deploy/.env
            echo DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }} >> ./deploy/.env
      - name: Deploy using SSH üöõ
        uses: UnterrainerInformatik/ssh-deploy-action@v1
        with:
          source: ./deploy/
          target: ${{ secrets.DEPLOY_DIR }}
          chmod-mask: 777
          chmod-selector: ./deploy/*.sh
          user: ${{ secrets.DEPLOY_SSH_USER }}
          host: ${{ secrets.DEPLOY_SERVER }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
      - name: Run using SSH üèÉ
        uses: UnterrainerInformatik/ssh-run-action@v1
        with:
          dir: ${{ secrets.DEPLOY_DIR }}
          file: up.sh
          user: ${{ secrets.DEPLOY_SSH_USER }}
          host: ${{ secrets.DEPLOY_SERVER }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}

