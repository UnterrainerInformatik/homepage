name: PIPELINE

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

jobs:
  bump:
    uses: UnterrainerInformatik/bump-semver-workflow/.github/workflows/workflow.yml@master
  build:
    name: Build üî®
    runs-on: [self-hosted, Linux, X64]
    needs: [bump]
    steps:
      - name: Pre-fetch upload-artifact action (self-hosted only) ‚öôÔ∏è
        if: contains(runner.labels, 'self-hosted')
        run: |
          mkdir -p ~/.setup-actions
          cd ~/.setup-actions
          if [ ! -d "upload-artifact" ]; then
            echo "Cloning upload-artifact@v4..."
            git clone --depth=1 --branch v4 https://github.com/actions/upload-artifact.git upload-artifact
            echo "‚úÖ upload-artifact@v4 cloned manually!"
          else
            echo "‚úÖ upload-artifact already fetched."
          fi
      - name: Checkout repo üì¶
        uses: actions/checkout@v4
      - name: Cache Node.js modules üíæ
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up Node ‚öôÔ∏è
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      - name: Update version in package.json üíæ
        uses: reedyuk/npm-version@1.1.1
        with:
          version: ${{ needs.bump.outputs.major_version }}.${{ needs.bump.outputs.minor_version }}.${{ needs.bump.outputs.build_version }}
      - name: build (install dependencies) ‚öôÔ∏è
        run: |
            npm install
      - name: build (build) üî®
        run: |
            npm run build
      - name: Upload build artifacts ‚¨ÜÔ∏è
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./dist

  docker-build:
    name: Build Docker Image üêã
    runs-on: [self-hosted, Linux, X64]
    needs: [build, bump]
    steps:
      - name: Pre-fetch upload-artifact action (self-hosted only) ‚öôÔ∏è
        if: contains(runner.labels, 'self-hosted')
        run: |
          mkdir -p ~/.setup-actions
          cd ~/.setup-actions
          if [ ! -d "upload-artifact" ]; then
            echo "Cloning upload-artifact@v4..."
            git clone --depth=1 --branch v4 https://github.com/actions/upload-artifact.git upload-artifact
            echo "‚úÖ upload-artifact@v4 cloned manually!"
          else
            echo "‚úÖ upload-artifact already fetched."
          fi
      - name: Checkout repo üì¶
        uses: actions/checkout@v4
      - name: Download build artifacts ‚¨áÔ∏è
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist
      - name: Setup QEMU ‚öôÔ∏è
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx ‚öôÔ∏è
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub üîë
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: test
        run: |
          echo docker: ${{ secrets.DOCKER_HUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME}}:${{ needs.bump.outputs.major_version }}.${{ needs.bump.outputs.minor_version }}.${{ needs.bump.outputs.build_version }}
      - name: Build and push üî®
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: |
              ${{ secrets.DOCKER_HUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME}}:latest
              ${{ secrets.DOCKER_HUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME}}:${{ needs.bump.outputs.major_version }}
              ${{ secrets.DOCKER_HUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME}}:${{ needs.bump.outputs.major_version }}.${{ needs.bump.outputs.minor_version }}
              ${{ secrets.DOCKER_HUB_USER }}/${{ secrets.DOCKER_IMAGE_NAME}}:${{ needs.bump.outputs.major_version }}.${{ needs.bump.outputs.minor_version }}.${{ needs.bump.outputs.build_version }}
  deploy:
    name: Deployment üöÄ
    runs-on: [self-hosted, Linux, X64]
    needs: [docker-build, build, bump]
    steps:
      - name: Pre-fetch upload-artifact action (self-hosted only) ‚öôÔ∏è
        if: contains(runner.labels, 'self-hosted')
        run: |
          mkdir -p ~/.setup-actions
          cd ~/.setup-actions
          if [ ! -d "upload-artifact" ]; then
            echo "Cloning upload-artifact@v4..."
            git clone --depth=1 --branch v4 https://github.com/actions/upload-artifact.git upload-artifact
            echo "‚úÖ upload-artifact@v4 cloned manually!"
          else
            echo "‚úÖ upload-artifact already fetched."
          fi
      - name: Checkout repo üì¶
        uses: actions/checkout@v4
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved
      - name: Touch OVPN client-config file
        run: touch client.ovpn
      - name: Fill OVPN client-config file
        run: |
            echo "${{ secrets.VPN_OVPN_FILE }}" >> client.ovpn
      - name: Connect to VPN üîì
        uses: "kota65535/github-openvpn-connect-action@v3"
        with:
          config_file: client.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}
      - name: Installing SSH key üîë
        uses: UnterrainerInformatik/setup-ssh-action@v1
        with:
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
      - name: Create deploy directory üöß
        uses: UnterrainerInformatik/ssh-mkdir-action@v1
        with:
          dir: ${{ secrets.DEPLOY_DIR }}
          user: ${{ secrets.DEPLOY_SSH_USER }}
          host: ${{ secrets.DEPLOY_SERVER }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
      - name: Create data directory üöß
        uses: UnterrainerInformatik/ssh-mkdir-action@v1
        with:
          dir: ${{ secrets.DATA_DIR }}
          user: ${{ secrets.DEPLOY_SSH_USER }}
          host: ${{ secrets.DEPLOY_SERVER }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
      - name: Touch .env file for deployment
        run: touch ./deploy/.env
      - name: Fill .env file for deployment
        run: |
            echo VERSION=${{ needs.bump.outputs.version }} >> ./deploy/.env
            echo MAJOR_VERSION=${{ needs.bump.outputs.major_version }} >> ./deploy/.env
            echo MINOR_VERSION=${{ needs.bump.outputs.minor_version }} >> ./deploy/.env
            echo BUILD_VERSION=${{ needs.bump.outputs.build_version }} >> ./deploy/.env
            echo DOCKER_HUB_USER=${{ secrets.DOCKER_HUB_USER }} >> ./deploy/.env
            echo DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }} >> ./deploy/.env
      - name: Deploy using SSH üöõ
        uses: UnterrainerInformatik/ssh-deploy-action@v1
        with:
          source: ./deploy/
          target: ${{ secrets.DEPLOY_DIR }}
          chmod-mask: 777
          chmod-selector: ./deploy/*.sh
          user: ${{ secrets.DEPLOY_SSH_USER }}
          host: ${{ secrets.DEPLOY_SERVER }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
      - name: Run using SSH üèÉ
        uses: UnterrainerInformatik/ssh-run-action@v1
        with:
          dir: ${{ secrets.DEPLOY_DIR }}
          file: up.sh
          user: ${{ secrets.DEPLOY_SSH_USER }}
          host: ${{ secrets.DEPLOY_SERVER }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}

